-- Auto Buy Seeds Script with GUI
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local MarketplaceService = game:GetService("MarketplaceService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Variables
local autoSellActive = false
local autoSellDelay = 3
local selectedSeeds = {}
local autoBuyActive = false
local autoFarmActive = false
local buyDelay = 0.01 -- Delay between purchases

-- Get game name
local gameName = "Game"
pcall(function()
    local info = MarketplaceService:GetProductInfo(game.PlaceId)
    gameName = info.Name
end)

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create Window
local Window = Rayfield:CreateWindow({
   Name = "Syntric | " .. gameName,
   Icon = 0,
   LoadingTitle = "Syntric",
   LoadingSubtitle = "by Mytril",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Syntric Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

-- Notification
Rayfield:Notify({
   Title = "Loading Successful!",
   Content = "Syntric Loaded Successfully by Mytril",
   Duration = 6.5,
   Image = 4483362458,
})

-- Tabs & Sections
local Main = Window:CreateTab("Main", 4483362458)
local Misc = Window:CreateTab("Misc", 4483362458)
local AutoFarms = Main:CreateSection("Auto Farm")
local AutoBuy = Misc:CreateSection("Auto Buy")

-- Auto Farm Toggle
Main:CreateToggle({
   Name = "Auto Farm",
   CurrentValue = false,
   Flag = "AutoFarmToggle",
   Callback = function(Value)
      autoFarmActive = Value

      if Value then
         coroutine.wrap(function()
            local function getNearestFarm(ownerPos)
               local nearest, minDist = nil, math.huge
               for _, farmFolder in pairs(workspace:WaitForChild("Farm"):GetChildren()) do
                  if farmFolder:IsA("Folder") then
                     local farmPos = farmFolder:FindFirstChild("Important")
                     if farmPos and farmPos:IsA("Folder") then
                        local part = farmPos:FindFirstChildWhichIsA("BasePart", true)
                        if part then
                           local dist = (ownerPos - part.Position).Magnitude
                           if dist < minDist then
                              minDist = dist
                              nearest = farmFolder
                           end
                        end
                     end
                  end
               end
               return nearest
            end

            local virtualInput = game:GetService("VirtualInputManager")
            while autoFarmActive do
               local character = player.Character or player.CharacterAdded:Wait()
               local hrp = character:WaitForChild("HumanoidRootPart")
               local ownerTag = workspace:FindFirstChild("OwnerTag")

               if ownerTag and ownerTag:IsA("Model") and ownerTag:FindFirstChild("HumanoidRootPart") then
                  hrp.CFrame = ownerTag.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
               end

               local nearestFarm = getNearestFarm(hrp.Position)
               if nearestFarm then
                  local plantsFolder = nearestFarm:FindFirstChild("Important") and nearestFarm.Important:FindFirstChild("Plants_Physical")
                  if plantsFolder then
                     local fruits = plantsFolder:GetChildren()
                     if #fruits > 0 then
                        local randomFruit = fruits[math.random(1, #fruits)]
                        local fruitPart = randomFruit:FindFirstChildWhichIsA("BasePart", true)
                        if fruitPart then
                           hrp.CFrame = CFrame.new(fruitPart.Position + Vector3.new(0, 5, 0))

                           while autoFarmActive and (hrp.Position - fruitPart.Position).Magnitude < 20 do
                              virtualInput:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                              task.wait(0.01)
                           end
                        end
                     end
                  end
               end

               task.wait(2)
            end
         end)()
      end
   end,
})

-- Auto Sell Toggle
Main:CreateToggle({
   Name = "Auto Sell",
   CurrentValue = false,
   Flag = "AutoSellToggle",
   Callback = function(Value)
       autoSellActive = Value

       if Value then
           coroutine.wrap(function()
               while autoSellActive do
                   local character = player.Character or player.CharacterAdded:Wait()
                   local hrp = character:WaitForChild("HumanoidRootPart")
                   local originalPosition = hrp.Position

                   local success, err = pcall(function()
                       local npcFolder = workspace:FindFirstChild("NPCS")
                       local npc = npcFolder and npcFolder:FindFirstChild("Sell Stands")

                       if npc then
                           local part = npc.PrimaryPart or npc:FindFirstChildWhichIsA("BasePart")
                           if part then
                               hrp.CFrame = CFrame.new(part.Position + Vector3.new(0, 5, 0))
                               task.wait(0.1)

                               local sellEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory")
                               for i = 1, 3 do
                                   if not autoSellActive then break end
                                   sellEvent:FireServer()
                                   task.wait(0.05)
                               end

                               hrp.CFrame = CFrame.new(originalPosition)
                           else
                               warn("No valid BasePart in Sell Stands.")
                           end
                       else
                           warn("Sell Stands NPC not found.")
                       end
                   end)

                   if not success then
                       warn("Auto Sell Error:", err)
                   end

                   task.wait(autoSellDelay)
               end
           end)()
       end
   end,
})

-- Improved Auto Buy System
local function buySeeds()
    if not autoBuyActive or #selectedSeeds == 0 then return end
    
    for _, seed in ipairs(selectedSeeds) do
        if not autoBuyActive then break end
        local success, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuySeedStock"):FireServer(seed)
        end)
        if not success then
            warn("Failed to buy seed:", seed, "Error:", err)
        end
        wait(buyDelay)
    end
end

-- Auto Buy Toggle with improved functionality
Misc:CreateToggle({
   Name = "Enable Auto Buy Seeds",
   Flag = "EnableAutoBuySeeds",
   Default = false,
   Callback = function(state)
       autoBuyActive = state
       if state then
           coroutine.wrap(function()
               while autoBuyActive do
                   buySeeds()
                   wait(1) -- Wait 1 second before next buying cycle
               end
           end)()
       end
   end,
})

-- Seed Selection Dropdown with improved options
Misc:CreateDropdown({
   Name = "Auto Buy Seeds",
   Options = {"Carrot", "Strawberry", "Blueberry", "Orange", "Tulip", "Tomato", "Corn", 
              "Raspberry", "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo", 
              "Coconut", "Cactus", "Dragon Fruit", "Mango", "Grape", "Mushroom", "Pepper"},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "AutoBuySeeds",
   Callback = function(seeds)
       selectedSeeds = seeds
       if #seeds > 0 then
           Rayfield:Notify({
               Title = "Seeds Selected",
               Content = "Selected " .. #seeds .. " seeds for auto-buying",
               Duration = 3,
               Image = 4483362458,
           })
       end
   end,
})

-- Buy Delay Slider
Misc:CreateSlider({
   Name = "Buy Delay (seconds)",
   Range = {0.01, 1},
   Increment = 0.01,
   Suffix = "s",
   CurrentValue = 0.01,
   Flag = "BuyDelaySlider",
   Callback = function(Value)
       buyDelay = Value
   end,
})

-- Auto Buy Gear Toggle
local AutoBuyGear = Misc:CreateToggle({
   Name = "Auto Buy Gear",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
       -- Add Auto Buy Gear functionality here
   end,
})

-- UI Toggles
local SeedsUi = Misc:CreateToggle({
   Name = "Seed Shop Ui",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
       local gui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("Seed_Shop")
       gui.Enabled = Value
   end,
})

local GearUi = Misc:CreateToggle({
   Name = "Gear Shop Ui",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
       local gui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("Gear_Shop")
       gui.Enabled = Value
   end,
})

-- Auto Sell Delay Dropdown
Main:CreateDropdown({
   Name = "Auto Sell Delay (Seconds)",
   Options = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
   CurrentOption = {"3"},
   MultipleOptions = false,
   Flag = "AutoSellDelayDropdown",
   Callback = function(Options)
      autoSellDelay = tonumber(Options[1]) or 3
   end,
})

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AutoBuyGui"
ScreenGui.Parent = playerGui

-- Create main frame
local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 200, 0, 150)
Frame.Position = UDim2.new(0.8, 0, 0.5, 0)
Frame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
Frame.BorderSizePixel = 0
Frame.Parent = ScreenGui

-- Create title bar for dragging
local TitleBar = Instance.new("Frame")
TitleBar.Size = UDim2.new(1, 0, 0, 25)
TitleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TitleBar.BorderSizePixel = 0
TitleBar.Parent = Frame

-- Create title text
local TitleText = Instance.new("TextLabel")
TitleText.Size = UDim2.new(1, 0, 1, 0)
TitleText.BackgroundTransparency = 1
TitleText.Text = "Auto Buy Seeds"
TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleText.TextSize = 14
TitleText.Font = Enum.Font.GothamBold
TitleText.Parent = TitleBar

-- Create dropdown button
local DropdownButton = Instance.new("TextButton")
DropdownButton.Size = UDim2.new(0.9, 0, 0, 30)
DropdownButton.Position = UDim2.new(0.05, 0, 0.2, 0)
DropdownButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
DropdownButton.Text = "Select Seeds"
DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DropdownButton.Parent = Frame

-- Create dropdown frame
local DropdownFrame = Instance.new("Frame")
DropdownFrame.Size = UDim2.new(0.9, 0, 0, 0)
DropdownFrame.Position = UDim2.new(0.05, 0, 0.4, 0)
DropdownFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
DropdownFrame.BorderSizePixel = 0
DropdownFrame.Visible = false
DropdownFrame.Parent = Frame

-- Create ScrollingFrame for dropdown items
local ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.ScrollBarThickness = 6
ScrollingFrame.Parent = DropdownFrame

-- Create UIListLayout for dropdown items
local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = ScrollingFrame
UIListLayout.Padding = UDim.new(0, 2)

-- Create toggle button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0.9, 0, 0, 30)
ToggleButton.Position = UDim2.new(0.05, 0, 0.8, 0)
ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
ToggleButton.Text = "Auto Buy: OFF"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Parent = Frame

-- Seed options
local seeds = {
    "Carrot", "Strawberry", "Blueberry", "Orange", "Tulip", "Tomato", "Corn",
    "Raspberry", "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo",
    "Coconut", "Cactus", "Dragon Fruit", "Mango", "Grape", "Mushroom", "Pepper"
}

-- Create dropdown items
for _, seed in ipairs(seeds) do
    local ItemButton = Instance.new("TextButton")
    ItemButton.Size = UDim2.new(1, 0, 0, 25)
    ItemButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    ItemButton.Text = seed
    ItemButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ItemButton.Parent = ScrollingFrame
    
    ItemButton.MouseButton1Click:Connect(function()
        if table.find(selectedSeeds, seed) then
            table.remove(selectedSeeds, table.find(selectedSeeds, seed))
            ItemButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        else
            table.insert(selectedSeeds, seed)
            ItemButton.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
        end
    end)
end

-- Toggle dropdown
DropdownButton.MouseButton1Click:Connect(function()
    DropdownFrame.Visible = not DropdownFrame.Visible
    if DropdownFrame.Visible then
        DropdownFrame.Size = UDim2.new(0.9, 0, 0, 200)
    else
        DropdownFrame.Size = UDim2.new(0.9, 0, 0, 0)
    end
end)

-- UI Toggle
local isVisible = true
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        isVisible = not isVisible
        ScreenGui.Enabled = isVisible
    end
end)

-- Make frame draggable (works for both PC and Mobile)
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

-- Handle touch input for mobile
local function onTouchBegan(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
    end
end

local function onTouchEnded()
    dragging = false
end

local function onTouchMoved(input)
    if dragging and input.UserInputType == Enum.UserInputType.Touch then
        update(input)
    end
end

-- Connect touch events
TitleBar.InputBegan:Connect(onTouchBegan)
TitleBar.InputEnded:Connect(onTouchEnded)
TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

-- Connect mouse events
TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Initial message
print("Auto Buy Seeds GUI loaded! Press RightShift to toggle visibility.")
